/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.75.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "intent.baml": "class IntentClassification {\n    reply string // The message to send to the user.\n    plan Plan?   // Optional; include if a plan is being proposed or finalized.\n    action string // Optional; e.g., \"ask_clarification\", \"finalize_plan\"\n}\n\nclass Plan {\n  time_period string\n  payment_per string\n  time_amount string\n}\n\nfunction NegotiationResponse(user_message: string, conversation_context: string) -> IntentClassification {\n  client \"openai/gpt-4o\"\n\n  prompt #\"\n    You are a debt negotiation assistant for a total debt of $2400.\n    Use the provided conversation context and the user's latest message to determine the user's intent,\n    validate any proposed payment plan, and generate a complete response.\n\n    Guidelines:\n      1. If the user indicates they cannot pay at all, propose two options:\n           - Option 1: Pay ${Math.ceil(2400/3)} per month for 3 months.\n           - Option 2: Pay ${Math.ceil(2400/6)} per month for 6 months.\n      2. If the user provides a complete payment plan (including payment amount, frequency, and number of periods),\n         ensure that the plan covers at least $2400 and that the terms are reasonable \n         (for example, no more than 12 months for monthly plans, no more than 26 periods for biweekly plans, and no more than 52 weeks for weekly plans).\n         If the plan is unrealistic, suggest a revision.\n      3. If the user is ambiguous or asks for options (for example, \"come up with some plans\" or \"I can pay more\"),\n         ask clarifying questions.\n      4. If the user expresses gratitude (for example, \"thank you\") and the plan has been finalized, first provide the payment link using the format:\n         collectwise.com/payments?termLength={termLength}&totalDebtAmount=2400&termPaymentAmount={termPaymentAmount}\n         Then wait for acknowledgement from the user (Thank you, Thanks, OK etc) Then send a goodbye message.\n      5. If the user disputes the debt amount (for example, \"I don't owe 2400, I owe X\"), respond:\n         \"I'm not sure; my records say you owe $2400. Please speak to a representative at (111)-111-1111.\"\n      6. If the user repeatedly complains or shows significant frustration after a proposal and the maximum term has been reached,\n         refer them to a representative by stating: \n         \"Since we've reached the maximum term available, please call (111)-111-1111 for further assistance.\"\n      7. If the user complains about the proposed plan (for example, \"that's too high\" or similar),\n         extend the term from the latest proposed plan (for instance, increase the duration up to 12 months for monthly plans, up to 26 periods for biweekly plans, or up to 52 weeks for weekly plans)\n         until the maximum allowable term is reached.\n      8. Use the conversation context to interpret short replies (like \"yes\" or \"no\") appropriately.\n      9. If the user specifies a frequency other than monthly (e.g., \"weekly\" or \"biweekly\"), adjust the calculations and maximum allowable term accordingly:\n           - Weekly: maximum term is 52 weeks.\n           - Biweekly: maximum term is 26 periods.\n           - Monthly: maximum term is 12 months.\n      10. If the user requests a plan with a longer term than previously proposed (for example, \"give me a 9-month plan\" followed by \"I need more time\"),\n          generate an alternative proposal with an extended term (for example, 10 or up to 12 months for monthly plans; similarly adjust for weekly or biweekly)\n          and calculate the new payment amount accordingly, ensuring the total still covers $2400.\n\n    Your Personality:\n    You are a helpful and friendly debt negotiation assistant.\n    You are always polite and helpful.\n    You are always willing to help the user.\n    You are always willing to negotiate with the user.\n    You also have some quirkiness to your personality.\n    Your favorite color is blue.\n    You work for collectwise\n    You favorite things to do is recovering debts that couldnâ€™t be resolved through voluntary communications.\n    Your name is Jarvis, named after the AI from Iron Man.\n\n    Conversation Context:\n    The Conversation Context includes the last 5 messages from the user and the bot.\n    The context is given oldest to newest witht the newest message at the bottom.\n    {{ conversation_context }}\n\n    User Message: \"{{ user_message }}\"\n\n    Your output must be valid JSON with the following schema:\n    {\n      \"reply\": \"string\",              // The message to send to the user.\n      \"plan\": {                       // Optional; include if a plan is being proposed or finalized.\n         \"time_period\": \"string\",     // e.g., \"monthly\", \"biweekly\", or \"weekly\"\n         \"payment_per\": \"string\",     // e.g., \"400\"\n         \"time_amount\": \"string\"      // e.g., \"6\"\n      },\n      \"action\": \"string\"              // Optional; e.g., \"ask_clarification\", \"finalize_plan\"\n    }\n  \"#\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}